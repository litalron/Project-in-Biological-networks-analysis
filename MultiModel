import numpy as np
import MMM
import time
import utils

# MultiModel class - execute sky cloud model and regular MMM.

class MultiModel:

    """
    inputs:
            e- matrix- each row is a signature.
            pi- an initial exposure vector.
            thresholds- the thresholds for sorting the data to different ranges of distances between mutations.
            data- a nested dictionary- a dictionary with a key to each patient, each key's value is a dictionary
                  which each key represent a chromosome, each chromosome keys is a dictionary with two keys.
                  The first key is 'mutations' with value of a list of int representing mutations in the chromosome,
                  and the second key is 'distances' with value of a list of the distance of each mutation from the
                  mutation before it.
            s- number of signatures provided in e.
            m- number of mutations kinds.
    fields:
            self.m- number of mutation kinds.
            self.s- number of signatures.
            self.e- matrix that each row in it represents a signature.
            self.pi- initial exposure vector for the EM algorithm.
            self.thresholds- a list of thresholds for sorting the mutations to different groups according to the
                             distances between them.
            self data- a nested dictionary- a dictionary with a key to each patient, each key's value is a
                  dictionary which each key represent a chromosome, each chromosome value is a matrix of the
                  shape (len(threshold), m). Each row in the matrix is the counts of mutations of each kind in a
                  certain range of distances.
            modelList- a list of MMM objects one for each range of mutations. Recreated for every new chromosome
                       during the running of the program.
            self.likelihood- a matrix that each element contains the likelihood of a chromosome of a patient
                             according to a model that was trained over the rest of the patient's chromosomes.

    output:
        the object contains log likelihood of all the chromosomes in each patient in cross validation
        in the field- likelihood: matrix of the shape
        (number of patients in the data, number of chromosomes each patient has).
    """
    def __init__(self, e, pi, thresholds, data, s=12, m=96):
        self.m = m
        self.s = s
        self.e = e
        self.pi = pi
        self.thresholds = thresholds
        self.data = utils.organize_multi_data(data, thresholds, m)
        self.ModelList = []
        self.likelihood = np.zeros((len(self.data), len(self.data[list(self.data.keys())[0]])))
        MultiModel.training(self)

    """
        self- a MultiModel object.
            runs over self.data and calculates log likelihood of cross validation (in method leave one out)
            for each chromosome for each patient, and storing it in self.likelihood.
    """
    def training(self):
        patient_number = 0
        for patient in self.data:
            chromosome_number = 0
            for ch in self.data[patient]:
                train_data = utils.sum_ch(patient, ch, self.data, self.m, self.thresholds)
                self.train(train_data)
                self.likelihood[patient_number][chromosome_number] = self.multi_out_likelihood(self.data[patient][ch])
                chromosome_number += 1
            patient_number += 1
        return

    """
        input:
            self- a MultiModel object.
            train_data- the data for training of the MMM objects. A matirx of shape len(self.thresholds) X self.m,
                        each row is data for a range between mutations.
        trains MMM object for each range with the range's data from train_data.
    """
    def train(self, train_data):
            self.ModelList = []
            for model in range(0, len(self.thresholds) + 1):
                self.ModelList.append(MMM.MMM(train_data[model], self.e, self.pi, self.s, self.m))
            for i in range(0, len(self.ModelList)):
                self.ModelList[i].train()

    """
        input:
            self- an MultiModel object.
            out_data- data that  it's likelihood is calculated.
        output:
            log_likelihood- the log likelihood of train_data according to the models in self.modelList.
    """
    def multi_out_likelihood(self, out_data):
        log_likelihood = 0
        for i in range(0, len(self.ModelList)):
            log_likelihood += self.ModelList[i].out_likelihood(out_data[i])
        return log_likelihood
